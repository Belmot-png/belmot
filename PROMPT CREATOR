{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPUa/a6Cb4xXfuuoDSjfQAY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["\"\"\"\n","\n","PROMPT CREATOR.\n","\n","Este módulo implementa um assistente criador de prompts para geração de imagem e texto\n","utilizando a API do Google Gemini. Este agente irá criar prompts com maestria para o que você precisar.\n","\n","Autor: Leoni Santos \"Belmot\"\n","Data: Maio de 2025\n","Versão: 2.0\n","\n","\"\"\"\n","\n","\n","\n","# --- SETUP INICIAL ---\n","\n","import sys\n","!pip -q install Google\n","!pip -q install google-adk\n","\n","import os\n","from google.colab import userdata\n","import google.genai as genai\n","from google.adk.agents import Agent\n","from google.adk.runners import Runner\n","from google.adk.sessions import InMemorySessionService\n","from google.genai import types as genai_types\n","import textwrap\n","from IPython.display import display, Markdown\n","import warnings\n","import re\n","\n","warnings.filterwarnings(\"ignore\")\n","\n","# --- CONFIGURAÇÃO DA API KEY ---\n","\n","try:\n","    api_key_value = userdata.get('GOOGLE_API_KEY')\n","    if api_key_value is None:\n","        raise ValueError(\"GOOGLE_API_KEY não encontrada no Colab Secrets. Por favor, adicione-a.\")\n","    os.environ[\"GOOGLE_API_KEY\"] = api_key_value\n","    print(\"GOOGLE_API_KEY carregada com sucesso!\")\n","except Exception as e:\n","    print(f\"Erro ao carregar/configurar GOOGLE_API_KEY: {e}\")\n","    print(\"Certifique-se de que a chave 'GOOGLE_API_KEY' existe e está acessível no Colab Secrets.\")\n","    sys.exit()\n","\n","ADK_MODEL_ID = \"gemini-2.0-flash\"\n","print(f\"Usando o modelo para ADK: {ADK_MODEL_ID}\")\n","\n","\n","# --- FUNÇÃO CALL_AGENT ---\n","\n","def call_agent(agent: Agent, message_text: str, session_id_suffix: str = \"agent_call\") -> str:\n","    session_service = InMemorySessionService()\n","    session_id = f\"session_{agent.name.lower().replace(' ', '_')}_{session_id_suffix}\"\n","\n","    try:\n","        session = session_service.create_session(\n","            app_name=agent.name,\n","            user_id=\"user1\",\n","            session_id=session_id\n","        )\n","    except Exception as e:\n","        print(f\"Aviso/Erro ao tentar criar a sessão '{session_id}' explicitamente: {e}.\")\n","\n","    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)\n","    content = genai_types.Content(role=\"user\", parts=[genai_types.Part(text=message_text)])\n","\n","    final_response = \"\"\n","    print(f\"\\n\")\n","    try:\n","        for event in runner.run(user_id=\"user1\", session_id=session_id, new_message=content):\n","            if event.is_final_response():\n","              for part in event.content.parts:\n","                if part.text is not None:\n","                  final_response += part.text\n","                  final_response += \"\\n\"\n","    except Exception as e:\n","        print(f\"Erro CRÍTICO durante a execução do agente '{agent.name}' na sessão '{session_id}': {e}\")\n","        return f\"Erro ao processar a solicitação com o agente '{agent.name}'. Detalhe: {e}\"\n","    return final_response.strip()\n","\n","# --- FUNÇÃO PARA EXIBIR TEXTO ---\n","\n","def display_agent_output(text):\n","    text = re.sub(r\"(?i)\\*\\*Prompt Revisado:\\*\\*\", \"## Prompt Revisado\", text)\n","    text = re.sub(r\"(?i)\\*\\*Perguntas:\\*\\*\", \"\\n## Perguntas\", text)\n","    display(Markdown(textwrap.indent(text, '> ', predicate=lambda _: True)))\n","\n","def extract_section(text, section_title):\n","    pattern_str = rf\"^\\*\\*{re.escape(section_title)}:\\*\\*(.*?)(?=(^\\*\\*.*:\\*\\*$)|$)\"\n","    match = re.search(pattern_str, text, re.MULTILINE | re.DOTALL | re.IGNORECASE)\n","    if match:\n","        return match.group(1).strip()\n","    return \"\"\n","\n","# --- INSTRUÇÕES PARA O AGENTE DE PROMPT ENGINEERING ---\n","\n","PROMPT_ENGINEER_INSTRUCTIONS = \"\"\"\n","Você é o \"Prompt Engineer Pro\", um assistente de IA especializado em ajudar usuários a criar os melhores prompts possíveis para diversas necessidades, incluindo geração de imagens e texto. Seu objetivo é guiar o usuário através de um processo iterativo para refinar a ideia inicial dele em um prompt claro, conciso, detalhado e eficaz.\n","\n","Siga este processo:\n","\n","1.  **Entendimento Inicial:** Com base na primeira solicitação do usuário (sobre o que deve ser o prompt e se é para imagem ou texto), você já deve tentar gerar uma primeira versão robusta e bem detalhada do prompt na seção \"Prompt Revisado\". Não faça muitas perguntas inicialmente, seja proativo e criativo.\n","2.  **Geração Iterativa:** Para cada interação, você fornecerá duas seções:\n","    *   **a) Prompt Revisado:** Apresente o prompt atualizado. Ele deve ser claro, conciso e facilmente compreensível pela IA de destino. Incorpore as informações mais recentes do usuário e suas próprias melhorias.\n","    *   **b) Perguntas:** Faça 2-3 perguntas relevantes e específicas que ajudem a obter informações adicionais do usuário para melhorar ainda mais o prompt na próxima iteração. As perguntas devem ser direcionadas para adicionar detalhes, clareza, ou explorar aspectos que podem ter sido omitidos.\n","3.  **Refinamento Contínuo:** Continue este processo iterativo. A cada resposta do usuário, atualize o \"Prompt Revisado\" e formule novas \"Perguntas\".\n","\n","**Diretrizes para Prompts de IMAGEM:**\n","Ao criar prompts para IMAGENS, considere e pergunte sobre (se apropriado):\n","*   Sujeito principal e seus detalhes (aparência, ação, emoção).\n","*   Cenário/Ambiente (localização, hora do dia, elementos de fundo).\n","*   Composição e Enquadramento (close-up, plano médio, ângulo da câmera).\n","*   Estilo Artístico (fotorrealismo, pintura, cartoon, anime, artista específico, etc.).\n","*   Iluminação (natural, dramática, suave, neon).\n","*   Atmosfera/Humor (alegre, sombrio, épico, sereno).\n","*   Paleta de Cores.\n","*   Nível de Detalhe/Qualidade (ex: \"highly detailed\", \"8K\", \"masterpiece\").\n","*   Parâmetros específicos da plataforma (ex: --ar 16:9, --style raw). Sugira-os se souber a plataforma alvo.\n","\n","**Diretrizes para Prompts de TEXTO:**\n","Ao criar prompts para TEXTO, considere e pergunte sobre (se apropriado):\n","*   Objetivo Principal (informar, persuadir, criar, resumir, analisar).\n","*   Verbo de Ação Claro (Escreva, Analise, Crie, Desenvolva, Resuma).\n","*   Tópico/Entidade Específica.\n","*   Formato da Saída (e-mail, post de blog, código, lista, roteiro).\n","*   Público-Alvo.\n","*   Tom e Estilo (formal, amigável, técnico, criativo).\n","*   Informações Essenciais a Incluir/Excluir.\n","*   Comprimento/Nível de Detalhe.\n","*   Estrutura Desejada (seções, pontos).\n","*   Persona para a IA (ex: \"Aja como um especialista em marketing\").\n","\n","Seja sempre prestativo, criativo e focado em ajudar o usuário a obter o melhor prompt possível.\n","Lembre-se de sempre fornecer as seções \"**Prompt Revisado:**\" e \"**Perguntas:**\" em suas respostas, começando cada título de seção em uma nova linha.\n","\"\"\"\n","\n","# --- CRIAÇÃO DO AGENTE DE PROMPT ENGINEERING ---\n","\n","print(\"\\nConfigurando o Agente Prompt Engineer Pro...\")\n","try:\n","    prompt_engineer_agent = Agent(\n","        name=\"PromptEngineerPro\",\n","        model=ADK_MODEL_ID,\n","    )\n","    print(f\"Agente '{prompt_engineer_agent.name}' configurado com modelo: {ADK_MODEL_ID}\")\n","except Exception as e:\n","    print(f\"Ocorreu um erro inesperado ao criar o agente: {e}\")\n","    sys.exit()\n","\n","# --- LOOP DE INTERAÇÃO PRINCIPAL ---\n","\n","if 'prompt_engineer_agent' in globals():\n","    print(\"\\n--- Bem-vindo ao Assistente de Criação de Prompts! ---\")\n","    print(\"Vou te ajudar a criar o prompt perfeito.\")\n","\n","    tipo_prompt_usuario = \"\"\n","    while tipo_prompt_usuario.lower() not in [\"imagem\", \"texto\"]:\n","        tipo_prompt_usuario = input(\"Você quer criar um prompt para gerar IMAGEM ou TEXTO? \").strip().lower()\n","        if tipo_prompt_usuario.lower() not in [\"imagem\", \"texto\"]:\n","            print(\"Opção inválida. Por favor, digite 'imagem' ou 'texto'.\")\n","\n","    ideia_inicial_usuario = input(f\"Qual é a ideia principal para o seu prompt de {tipo_prompt_usuario}? \").strip()\n","\n","    prompt_atual_construido = \"\"\n","    resposta_usuario_anterior = \"\"\n","    session_suffix_counter = 0\n","\n","    while True:\n","        session_suffix_counter += 1\n","        if not prompt_atual_construido: # Primeira iteração\n","            mensagem_para_agente = f\"\"\"\n","{PROMPT_ENGINEER_INSTRUCTIONS}\n","\n","--- INÍCIO DA SESSÃO DE PROMPT ENGINEERING ---\n","TAREFA INICIAL:\n","O usuário quer criar um prompt de '{tipo_prompt_usuario}'.\n","A ideia inicial do usuário é: \"{ideia_inicial_usuario}\"\n","\n","Com base nisso, forneça a primeira versão do \"**Prompt Revisado:**\" e suas \"**Perguntas:**\" para refinar. Seja proativo e crie um bom primeiro rascunho detalhado para o prompt.\n","Lembre-se de iniciar cada título de seção (**Prompt Revisado:**, **Perguntas:**) em uma nova linha.\n","\"\"\"\n","        else: # Iterações subsequentes\n","            mensagem_para_agente = f\"\"\"\n","{PROMPT_ENGINEER_INSTRUCTIONS}\n","\n","--- CONTINUAÇÃO DA SESSÃO DE PROMPT ENGINEERING ---\n","CONTEXTO ATUAL:\n","Estamos refinando um prompt de '{tipo_prompt_usuario}'.\n","O **Prompt Revisado** até agora é:\n","{prompt_atual_construido}\n","\n","RESPOSTA DO USUÁRIO ÀS PERGUNTAS ANTERIORES:\n","{resposta_usuario_anterior}\n","\n","TAREFA:\n","Com base no prompt atual e na resposta do usuário, atualize o \"**Prompt Revisado:**\" e formule novas \"**Perguntas:**\" para o próximo refinamento.\n","Lembre-se de iniciar cada título de seção (**Prompt Revisado:**, **Perguntas:**) em uma nova linha.\n","\"\"\"\n","\n","        resposta_agente_completa = call_agent(\n","            agent=prompt_engineer_agent,\n","            message_text=mensagem_para_agente,\n","            session_id_suffix=f\"iteracao_{session_suffix_counter}\"\n","        )\n","\n","        if \"Erro ao processar\" in resposta_agente_completa or not resposta_agente_completa:\n","            print(resposta_agente_completa if resposta_agente_completa else \"O agente não retornou uma resposta.\")\n","            print(\"Não foi possível continuar. Tente novamente ou verifique os logs de erro.\")\n","            break # Sai do loop em caso de erro crítico\n","\n","        # Extrai as seções da resposta do agente\n","        # Essas variáveis agora guardam o resultado da última interação\n","        ultimo_prompt_revisado_extraido = extract_section(resposta_agente_completa, \"Prompt Revisado\")\n","        ultimas_perguntas_extraidas = extract_section(resposta_agente_completa, \"Perguntas\")\n","\n","        print(\"\\n--- Resposta do Prompt Engineer Pro ---\")\n","\n","        # Atualiza o prompt_atual_construido com a última versão extraída, se houver.\n","        # Este será o prompt usado se o usuário decidir finalizar AGORA.\n","        if ultimo_prompt_revisado_extraido:\n","            prompt_atual_construido = ultimo_prompt_revisado_extraido # Atualiza o prompt principal\n","            display(Markdown(\"## Prompt Revisado (Rodada Atual)\"))\n","            display(Markdown(textwrap.indent(prompt_atual_construido, '> ', predicate=lambda _: True)))\n","        elif resposta_agente_completa and not ultimas_perguntas_extraidas: # Se não houve prompt revisado, mas houve resposta sem perguntas\n","            print(\"[O agente não forneceu um 'Prompt Revisado' claro, usando resposta completa como fallback.]\")\n","            prompt_atual_construido = resposta_agente_completa\n","            display(Markdown(\"## Prompt (Resposta Completa como Fallback)\"))\n","            display(Markdown(textwrap.indent(prompt_atual_construido, '> ', predicate=lambda _: True)))\n","        else:\n","            print(\"[O prompt anterior será mantido se você finalizar agora.]\")\n","\n","        # Exibe as perguntas da rodada atual, se houver\n","        if ultimas_perguntas_extraidas:\n","            display(Markdown(\"\\n## Perguntas para Refinamento (Rodada Atual)\"))\n","            display(Markdown(textwrap.indent(ultimas_perguntas_extraidas, '> ', predicate=lambda _: True)))\n","            print(\"-\" * 30)\n","\n","            # A resposta do usuário será usada para a PRÓXIMA iteração ou para decidir FINALIZAR\n","            resposta_usuario_para_proxima_iteracao_ou_finalizar = input(\"Suas respostas/feedback (ou digite 'fim' se o prompt estiver bom): \").strip()\n","        else:\n","            print(\"\\n\")\n","            resposta_usuario_para_proxima_iteracao_ou_finalizar = input(\"Digite 'PRONTO' se o prompt estiver bom, ou forneça mais instruções/correções: \").strip()\n","\n","        # Verifica se o usuário quer finalizar\n","        if resposta_usuario_para_proxima_iteracao_ou_finalizar.upper() == 'fim', 'FIM', 'Fim', 'FIm', 'fiM', 'fIM', 'FiM':\n","            print(\"\\n--- Prompt Finalizado ---\")\n","\n","            # O prompt_final_pt é o prompt_atual_construido da ÚLTIMA atualização bem-sucedida\n","            prompt_final_pt = prompt_atual_construido\n","\n","            # Limpeza final para garantir que não haja perguntas (medida de segurança)\n","            if prompt_final_pt:\n","                if \"**Perguntas:**\" in prompt_final_pt:\n","                    prompt_final_pt = prompt_final_pt.split(\"**Perguntas:**\")[0].strip()\n","                if \"Perguntas:\" in prompt_final_pt:\n","                    prompt_final_pt = prompt_final_pt.split(\"Perguntas:\")[0].strip()\n","            else:\n","                print(\"ERRO: Não foi possível obter um prompt final para exibir ou traduzir.\")\n","                break\n","\n","            display(Markdown(\"## Seu Prompt Final (Português):\"))\n","            display(Markdown(textwrap.indent(prompt_final_pt, '> ', predicate=lambda _: True)))\n","\n","            # --- INÍCIO DA TRADUÇÃO PARA INGLÊS ---\n","\n","            if prompt_final_pt:\n","                mensagem_para_traducao = f\"\"\"\n","                Por favor, traduza o seguinte texto para o inglês de forma precisa e natural.\n","                Mantenha o significado e a intenção do texto original.\n","                Responda APENAS com o texto traduzido, sem nenhum comentário adicional, saudações, explicações ou formatação como \"Prompt Revisado:\".\n","\n","                Texto para traduzir:\n","                ---\n","                {prompt_final_pt}\n","                ---\n","                \"\"\"\n","                prompt_em_ingles = call_agent(\n","                    agent=prompt_engineer_agent,\n","                    message_text=mensagem_para_traducao,\n","                    session_id_suffix=f\"traducao_final_{session_suffix_counter}\"\n","                )\n","\n","                if prompt_em_ingles and \"Erro ao processar\" not in prompt_em_ingles:\n","                    display(Markdown(\"\\n## Seu Prompt Final (English):\"))\n","                    prompt_em_ingles_limpo = prompt_em_ingles.replace(\"Prompt Revisado:\", \"\").strip()\n","                    display(Markdown(textwrap.indent(prompt_em_ingles_limpo, '> ', predicate=lambda _: True)))\n","                elif not prompt_em_ingles:\n","                    print(\"O agente não retornou a tradução.\")\n","                else:\n","                    print(f\"Erro durante a tradução: {prompt_em_ingles}\")\n","            else:\n","                print(\"Nenhum prompt em português disponível para tradução.\")\n","            # --- FIM DA TRADUÇÃO PARA INGLÊS ---\n","\n","            print(\"\\nÓtimo! Espero que este prompt gere excelentes resultados!\")\n","            break\n","        else:\n","            resposta_usuario_anterior = resposta_usuario_para_proxima_iteracao_ou_finalizar\n","\n","elif not resposta_usuario_anterior and not perguntas_do_agente:\n","             print(\"Nenhuma entrada fornecida e nenhuma pergunta feita. Se o prompt estiver bom, digite 'PRONTO'.\")\n","\n","else:\n","    print(\"Agente 'PromptEngineerPro' não foi configurado. Encerrando.\")"],"metadata":{"id":"cwdgJ6S8GJ_N","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1747519754042,"user_tz":180,"elapsed":10129,"user":{"displayName":"Leoni Belmot","userId":"17985592894883095832"}},"outputId":"13349d0c-4ceb-43b6-829d-6086b857cd47"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[31mERROR: Operation cancelled by user\u001b[0m\u001b[31m\n","\u001b[0mTraceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/cli/base_command.py\", line 179, in exc_logging_wrapper\n","    status = run_func(*args)\n","             ^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/cli/req_command.py\", line 67, in wrapper\n","    return func(self, options, args)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/commands/install.py\", line 447, in run\n","    conflicts = self._determine_conflicts(to_install)\n","                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/commands/install.py\", line 578, in _determine_conflicts\n","    return check_install_conflicts(to_install)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/operations/check.py\", line 101, in check_install_conflicts\n","    package_set, _ = create_package_set_from_installed()\n","                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/operations/check.py\", line 39, in create_package_set_from_installed\n","    for dist in env.iter_installed_distributions(local_only=False, skip=()):\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/metadata/base.py\", line 664, in <genexpr>\n","    return (d for d in it if d.canonical_name not in skip)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/metadata/base.py\", line 612, in iter_all_distributions\n","    for dist in self._iter_distributions():\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/metadata/importlib/_envs.py\", line 176, in _iter_distributions\n","    yield from finder.find(location)\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/metadata/importlib/_envs.py\", line 79, in find\n","    for dist, info_location in self._find_impl(location):\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/metadata/importlib/_envs.py\", line 64, in _find_impl\n","    raw_name = get_dist_name(dist)\n","               ^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/metadata/importlib/_compat.py\", line 52, in get_dist_name\n","    name = cast(Any, dist).name\n","           ^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/importlib/metadata/__init__.py\", line 622, in name\n","    return self.metadata['Name']\n","           ^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/importlib/metadata/__init__.py\", line 617, in metadata\n","    return _adapters.Message(email.message_from_string(text))\n","                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/email/__init__.py\", line 37, in message_from_string\n","    return Parser(*args, **kws).parsestr(s)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/email/parser.py\", line 67, in parsestr\n","    return self.parse(StringIO(text), headersonly=headersonly)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/email/parser.py\", line 56, in parse\n","    feedparser.feed(data)\n","  File \"/usr/lib/python3.11/email/feedparser.py\", line 173, in feed\n","    self._input.push(data)\n","  File \"/usr/lib/python3.11/email/feedparser.py\", line 109, in push\n","    parts = self._partial.readlines()\n","            ^^^^^^^^^^^^^^^^^^^^^^^^^\n","KeyboardInterrupt\n","\n","During handling of the above exception, another exception occurred:\n","\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/pip3\", line 10, in <module>\n","    sys.exit(main())\n","             ^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/cli/main.py\", line 80, in main\n","    return command.main(cmd_args)\n","           ^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/cli/base_command.py\", line 100, in main\n","    return self._main(args)\n","           ^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/cli/base_command.py\", line 232, in _main\n","    return run(options, args)\n","           ^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/cli/base_command.py\", line 216, in exc_logging_wrapper\n","    logger.debug(\"Exception information:\", exc_info=True)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 1477, in debug\n","    self._log(DEBUG, msg, args, **kwargs)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 1634, in _log\n","    self.handle(record)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 1644, in handle\n","    self.callHandlers(record)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 1706, in callHandlers\n","    hdlr.handle(record)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 978, in handle\n","    self.emit(record)\n","  File \"/usr/lib/python3.11/logging/handlers.py\", line 75, in emit\n","    logging.FileHandler.emit(self, record)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 1230, in emit\n","    StreamHandler.emit(self, record)\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 1110, in emit\n","    msg = self.format(record)\n","          ^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 953, in format\n","    return fmt.format(record)\n","           ^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/pip/_internal/utils/logging.py\", line 112, in format\n","    formatted = super().format(record)\n","                ^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 695, in format\n","    record.exc_text = self.formatException(record.exc_info)\n","                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/logging/__init__.py\", line 645, in formatException\n","    traceback.print_exception(ei[0], ei[1], tb, None, sio)\n","  File \"/usr/lib/python3.11/traceback.py\", line 124, in print_exception\n","    te = TracebackException(type(value), value, tb, limit=limit, compact=True)\n","         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/traceback.py\", line 728, in __init__\n","    self.stack = StackSummary._extract_from_extended_frame_gen(\n","                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/lib/python3.11/traceback.py\", line 418, in _extract_from_extended_frame_gen\n","    fnames.add(filename)\n","KeyboardInterrupt\n","^C\n","GOOGLE_API_KEY carregada com sucesso!\n","Usando o modelo para ADK: gemini-2.0-flash\n","\n","Configurando o Agente Prompt Engineer Pro...\n","Agente 'PromptEngineerPro' configurado com modelo: gemini-2.0-flash\n","\n","--- Bem-vindo ao Assistente de Criação de Prompts! ---\n","Vou te ajudar a criar o prompt perfeito.\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-6864aeeee64b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    160\u001b[0m     \u001b[0mtipo_prompt_usuario\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mtipo_prompt_usuario\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"imagem\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"texto\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m         \u001b[0mtipo_prompt_usuario\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Você quer criar um prompt para gerar IMAGEM ou TEXTO? \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtipo_prompt_usuario\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"imagem\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"texto\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Opção inválida. Por favor, digite 'imagem' ou 'texto'.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"code","source":[],"metadata":{"id":"z49Aqf3TOtBg"},"execution_count":null,"outputs":[]}]}